pipeline { 
    agent any

    // No 'tools' block is used here.
    // The pipeline relies on a 'python' executable being available in the agent's PATH,
    // and then creates and uses a dedicated virtual environment for the build.

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    // Checkout the latest code from your SCM into the workspace.
                    checkout scm
                    echo "Repository checked out."
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    // Change directory to your Python application's root (e.g., 'app' folder)
                    // This is where 'requirements.txt' and the virtual environment 'venv' will reside.
                    dir('app') { // IMPORTANT: Adjust 'app' if your Python code is in a different subdirectory or at the repository root
                        echo "Setting up Python virtual environment..."

                        // Create a virtual environment named 'venv'.
                        // On Windows, 'venv' creates 'venv\Scripts' where the python executable is.
                        sh 'python -m venv venv'

                        // Define the path to the Python executable within the newly created virtual environment.
                        // Using forward slashes as the 'sh' step (e.g., Git Bash) can interpret them on Windows.
                        // The Python executable is in 'venv/Scripts/' on Windows.
                        def venvPythonExecutable = "./venv/Scripts/python"

                        echo "Installing basic Python packages (pip, pytest) into the virtual environment..."
                        // Use the full path to the virtual environment's python to install packages.
                        sh """
                            "${venvPythonExecutable}" -m pip install --upgrade pip
                            "${venvPythonExecutable}" -m pip install pytest
                        """

                        echo "Installing dependencies from requirements.txt if present..."
                        // Check for requirements.txt and install if it exists.
                        sh """
                            if [ -f requirements.txt ]; then
                                "${venvPythonExecutable}" -m pip install -r requirements.txt
                                echo "Dependencies installed from requirements.txt"
                            else
                                echo "No requirements.txt found. Skipping dependency installation."
                            fi
                        """
                        echo "Python environment setup complete."
                    }
                }
            }
        }

        stage('Run Python Tests') {
            steps {
                script {
                    // Change directory to the workspace root.
                    // This allows pytest to discover test files located in subdirectories
                    // like 'Tests/' which might be parallel to the 'app/' directory.
                    dir('.') { // Current working directory is now C:\ProgramData\Jenkins\.jenkins\workspace\flask-app-python-tests
                        echo "Verifying test files exist in 'Tests/' directory..."
                        // List contents of the 'Tests' directory to confirm file presence and casing
                        sh 'ls -lR Tests/'

                        echo "Attempting to collect Python tests with pytest (--collect-only)..."
                        def venvPythonExecutableAtRoot = "./app/venv/Scripts/python"

                        // Use --collect-only to diagnose collection issues separately from execution.
                        // Add -s to prevent output capture, and -vv for very verbose output during collection.
                        // Any import errors or test setup issues during collection should show up here.
                        sh """
                            "${venvPythonExecutableAtRoot}" -m pytest --collect-only -s -vv Tests/ --ignore=app/venv/
                        """

                        echo "Running Python tests with pytest..."
                        // This step will run the actual tests. It might fail if collection still yields 0 items.
                        sh """
                            "${venvPythonExecutableAtRoot}" -m pytest --verbose Tests/ --ignore=app/venv/
                        """
                        echo "Python tests completed."
                    }
                }
            }
        }

        // Optional: Add a stage for linting/code quality checks
        // stage('Code Quality Check') {
        //     steps {
        //         script {
        //             // Decide the directory based on where you want Flake8 to scan.
        //             // If scanning the entire repository (e.g., app/, Tests/, etc.):
        //             dir('.') {
        //                 echo "Running Flake8 for code quality..."
        //                 def venvPythonExecutableAtRoot = "./app/venv/Scripts/python"
        //                 sh """
        //                     "${venvPythonExecutableAtRoot}" -m pip install flake8
        //                     "${venvPythonExecutableAtRoot}" -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        //                     "${venvPythonExecutableAtRoot}" -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        //                 """
        //                 echo "Code quality check completed."
        //             }
        //             // If scanning only the 'app' directory:
        //             // dir('app') {
        //             //     echo "Running Flake8 for code quality..."
        //             //     def venvPythonExecutable = "./venv/Scripts/python"
        //             //     sh """
        //             //         "${venvPythonExecutable}" -m pip install flake8
        //             //         "${venvPythonExecutable}" -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        //             //         "${venvPythonExecutable}" -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        //             //     """
        //             //     echo "Code quality check completed."
        //             // }
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                // Clean up the virtual environment regardless of build success or failure.
                // The 'venv' is located inside the 'app' directory.
                dir('app') {
                    echo "Cleaning up Python virtual environment..."
                    sh 'rm -rf venv' // Deletes the 'venv' directory
                    echo "Virtual environment removed."
                }
            }
            echo 'Python testing pipeline finished.'
        }
        success {
            echo '✅ Python application tests passed successfully!'
        }
        failure {
            echo '❌ Python application tests failed. Check logs above.'
        }
    }
}
