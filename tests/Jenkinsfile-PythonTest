pipeline { // This MUST be 'pipeline' with a lowercase 'p' at the start.
    agent any

    // No 'tools' block is used here.
    // The pipeline relies on a 'python' executable being available in the agent's PATH,
    // and then creates and uses a dedicated virtual environment for the build.

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    // Checkout the latest code from your SCM into the workspace.
                    checkout scm
                    echo "Repository checked out."
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    // We'll create the venv and install dependencies from the workspace root
                    // because requirements.txt is at the root.
                    dir('.') { // Changed to root directory
                        echo "Setting up Python virtual environment..."

                        // Create venv in a dedicated directory at the root, e.g., '.venv_test'
                        // This avoids polluting 'app' directly with venv files.
                        sh 'python -m venv .venv_test'

                        // Define the path to the Python executable within the newly created virtual environment.
                        def venvPythonExecutable = "./.venv_test/Scripts/python"

                        echo "Installing basic Python packages (pip, pytest) into the virtual environment..."
                        sh """
                            "${venvPythonExecutable}" -m pip install --upgrade pip
                            "${venvPythonExecutable}" -m pip install pytest
                        """

                        echo "Installing dependencies from requirements.txt (located at root)..."
                        // Set PG_LIB_DIR explicitly for psycopg2-binary installation.
                        // Replace 'C:/PROGRA~1/POSTGR~1/16/lib' with the actual path to your PostgreSQL 'lib' directory.
                        // You can find this by looking at your PostgreSQL installation path (e.g., C:\Program Files\PostgreSQL\16\lib).
                        // Using 'withEnv' for robustness.
                        withEnv(["PG_LIB_DIR=C:/PROGRA~1/POSTGR~1/16/lib"]) { // IMPORTANT: Verify this path matches your PostgreSQL installation
                            sh """
                                if [ -f requirements.txt ]; then
                                    "${venvPythonExecutable}" -m pip install -r requirements.txt
                                    echo "Dependencies installed from requirements.txt"
                                else
                                    error "ERROR: requirements.txt not found at the repository root! Cannot install dependencies."
                                fi
                            """
                        }
                        echo "Python environment setup complete."
                    }
                }
            }
        }

        stage('Run Python Tests') {
            steps {
                script {
                    // Set PYTHONPATH for the entire stage using withEnv.
                    // This ensures the PARENT directory of 'app' is on the Python module search path.
                    withEnv(["PYTHONPATH=${env.WORKSPACE}"]) {
                        dir('.') { // Current working directory is the workspace root
                            echo "Verifying test files exist in 'Tests/' directory..."
                            sh 'ls -lR Tests/'

                            echo "Attempting to collect Python tests with pytest (--collect-only)..."
                            // Path to the Python executable in the venv, now relative to the root.
                            def venvPythonExecutableAtRoot = "./.venv_test/Scripts/python"

                            sh """
                                "${venvPythonExecutableAtRoot}" -m pytest --collect-only -s -vv Tests/ --ignore=.venv_test/ -p no:warnings
                            """

                            echo "Running Python tests with pytest..."
                            sh """
                                "${venvPythonExecutableAtRoot}" -m pytest --verbose Tests/ --ignore=.venv_test/ -p no:warnings
                            """
                            echo "Python tests completed."
                        }
                    }
                }
            }
        }

        // Optional: Add a stage for linting/code quality checks
        // stage('Code Quality Check') {
        //     steps {
        //         script {
        //             withEnv(["PYTHONPATH=${env.WORKSPACE}"]) {
        //                 dir('.') {
        //                     echo "Running Flake8 for code quality..."
        //                     def venvPythonExecutableAtRoot = "./.venv_test/Scripts/python"
        //                     sh """
        //                         "${venvPythonExecutableAtRoot}" -m pip install flake8
        //                         "${venvPythonExecutableAtRoot}" -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        //                         "${venvPythonExecutableAtRoot}" -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        //                     """
        //                     echo "Code quality check completed."
        //                 }
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                // Clean up the virtual environment, now at the root.
                dir('.') { // Changed to root directory
                    echo "Cleaning up Python virtual environment..."
                    sh 'rm -rf .venv_test' // Deletes the '.venv_test' directory
                    echo "Virtual environment removed."
                }
            }
            echo 'Python testing pipeline finished.'
        }
        success {
            echo '✅ Python application tests passed successfully!'
        }
        failure {
            echo '❌ Python application tests failed. Check logs above.'
        }
    }
}