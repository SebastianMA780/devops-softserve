pipeline {
    agent any

    // No 'tools' block needed here as we're managing the Python environment
    // directly within the pipeline using 'venv' and direct python executable calls.

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    // Checkout the latest code from your SCM
                    checkout scm
                    echo "Repository checked out."
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    // Change directory to your Python application's root
                    dir('app') { // Adjust 'app' if your Python code is in a different subdirectory or at the root
                        echo "Setting up Python virtual environment..."
                        // Create a virtual environment. On Windows, this creates 'venv\Scripts'.
                        sh 'python -m venv venv'

                        // Define the path to the Python executable within the newly created virtual environment.
                        // We use forward slashes as the 'sh' step (likely Git Bash) can interpret them.
                        // On Windows, the Python executable is in 'venv\Scripts', not 'venv\bin'.
                        sh '''
                            VENV_PYTHON="./venv/Scripts/python"

                            echo "Installing basic Python packages (pip, pytest) into the virtual environment..."
                            "$VENV_PYTHON" -m pip install --upgrade pip
                            "$VENV_PYTHON" -m pip install pytest

                            echo "Installing dependencies from requirements.txt if present..."
                            if [ -f requirements.txt ]; then
                                "$VENV_PYTHON" -m pip install -r requirements.txt
                                echo "Dependencies installed from requirements.txt"
                            else
                                echo "No requirements.txt found. Skipping dependency installation."
                            fi
                        '''
                        echo "Python environment setup complete."
                    }
                }
            }
        }

        stage('Run Python Tests') {
            steps {
                script {
                    // Change directory to your Python application's root
                    dir('app') { // Adjust 'app' if your Python code is in a different subdirectory or at the root
                        echo "Running Python tests with pytest..."
                        // Use the Python executable from the virtual environment to run pytest
                        sh '''
                            VENV_PYTHON="./venv/Scripts/python"
                            "$VENV_PYTHON" -m pytest --verbose
                        '''
                        echo "Python tests completed."
                    }
                }
            }
        }

        // Optional: Add a stage for linting/code quality checks
        // stage('Code Quality Check') {
        //     steps {
        //         script {
        //             dir('app') {
        //                 echo "Running Flake8 for code quality..."
        //                 sh '''
        //                     VENV_PYTHON="./venv/Scripts/python"
        //                     "$VENV_PYTHON" -m pip install flake8
        //                     "$VENV_PYTHON" -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        //                     "$VENV_PYTHON" -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        //                 '''
        //                 echo "Code quality check completed."
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                // Clean up the virtual environment
                dir('app') { // Adjust 'app' if your Python code is in a different subdirectory or at the root
                    echo "Cleaning up Python virtual environment..."
                    sh 'rm -rf venv'
                    echo "Virtual environment removed."
                }
            }
            echo 'Python testing pipeline finished.'
        }
        success {
            echo '✅ Python application tests passed successfully!'
        }
        failure {
            echo '❌ Python application tests failed. Check logs above.'
        }
    }
}

