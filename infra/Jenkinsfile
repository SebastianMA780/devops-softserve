pipeline {
    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    } 
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    agent any
    tools {
        terraform 'terraform'
    }
    stages {
        stage('Verify Setup') {
            steps {
                sh 'terraform --version'
                
                // Check AWS credentials
                sh '''
                    echo "=== AWS CREDENTIALS CHECK ==="
                    echo "AWS_ACCESS_KEY_ID is set: ${AWS_ACCESS_KEY_ID:+YES}"
                    echo "AWS_SECRET_ACCESS_KEY is set: ${AWS_SECRET_ACCESS_KEY:+YES}"
                '''
            }
        }

        stage('Plan') {
            steps {
							withCredentials([file(credentialsId: 'terraform-tfvars', variable: 'TFVARS_FILE')]) {
                // Clean up any hanging processes and reinitialize
                sh '''
                    cd infra
										# Remove any existing lock files
										rm -f .terraform.tfstate.lock.info
										rm -f .terraform.lock.hcl
										rm -rf .terraform/
										# Also clean the state file if it's corrupted
										rm -f terraform.tfstate
										echo "Cleaned previous terraform state and locks"
                '''
                
								sh 'cd infra && terraform init'
                
								sh 'cd infra && terraform plan -var-file=$TFVARS_FILE -out tfplan'
                
                sh 'cd infra && terraform show -no-color tfplan > tfplan.txt'
							}
            }
        }

        stage('Approval') {
           when {
               not {
                   equals expected: true, actual: params.autoApprove
               }
           }
           steps {
               script {
                    def plan = readFile 'infra/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
               }
           }
       }

        stage('Apply') {
            steps {
                sh 'cd infra && terraform apply -input=false tfplan'
            }
        }

				stage('Get Terraform Outputs') {
					steps {
						dir('infra') {
							script {
								env.EC2_IP = sh(script: "terraform output -raw ec2_public_ip", returnStdout: true).trim()
								env.RDS_ENDPOINT = sh(script: "terraform output -raw rds_endpoint", returnStdout: true).trim()
								// If you have DB username/password in outputs, capture them similarly:
								// env.DB_USER = sh(script: "terraform output -raw db_username", returnStdout: true).trim()
								// env.DB_PASS = sh(script: "terraform output -raw db_password", returnStdout: true).trim()
							}
						}
						echo "EC2_IP = ${env.EC2_IP}"
						echo "RDS_ENDPOINT = ${env.RDS_ENDPOINT}"
					}
				}
		}
    post {
        always {
            sh 'cd infra && rm -f tfplan tfplan.txt || echo "No temp files to clean"'
        }
        success {
            echo "EC2 and RDS instance 'flask-app-dev' deployed successfully!"
        }
        failure {
            echo "Deployment failed. Check logs above."
        }
    }
}